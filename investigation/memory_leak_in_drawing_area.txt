In go/pkg/mod/github.com/gotk3/gotk3@v0.6.5-0.20240618185848-ff349ae13f56/glib/connect.go

// Circular References
//
// To prevent circular references, prefer declaring Connect functions like so:
//
//    obj.Connect(func(obj *ObjType) { obj.Do() })
//
// Instead of directly referencing the object from outside like so:
//
//    obj.Connect(func() { obj.Do() })
//
// When using Connect, beware of referencing variables outside the closure that
// may cause a circular reference that prevents both Go from garbage collecting
// the callback and GTK from successfully unreferencing its values.
//



	app.viewport.Connect("draw", func(da *gtk.DrawingArea, cr *cairo.Context) {
		
	})


---------------------

IdleAdd might be the solution

https://golang.hotexamples.com/examples/github.com.andre-hub.gotk3.glib/-/IdleAdd/golang-idleadd-function-examples.html


https://github.com/gotk3/gotk3-examples/blob/d13b559ce37ecd7e8b777fc4d59ea9cb71006cc0/gtk-examples/goroutines/goroutines.go#L50


-------------------

how to detect memory leak in Gocv

// this does not seem to indicate Mat-s are leaking
// go run -tags matprofile .
// var b bytes.Buffer
// gocv.MatProfile.WriteTo(&b, 1)
// fmt.Print(b.String())
